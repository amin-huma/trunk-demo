name: Backport release PR to release-1.0

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Merged PR number to backport"
        required: true
        type: string

jobs:
  backport:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged && contains(github.event.pull_request.labels.*.name, 'release')) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git author
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Ensure target branch exists
        run: |
          git ls-remote --exit-code --heads origin release-1.0 >/dev/null || {
            echo "::error::Target branch 'release-1.0' not found"; exit 1; }

      - name: Create backport branch off release-1.0
        env:
          PRNUM: ${{ github.event.pull_request.number || inputs.pr_number }}
        run: |
          git fetch origin release-1.0
          BP="backport/pr-${PRNUM}-to-release-1.0"
          git checkout -B "$BP" origin/release-1.0
          echo "BP=$BP" >> "$GITHUB_ENV"

      - name: Apply PR patch (diff-only)
        env:
          GH_TOKEN: ${{ github.token }}
          PRNUM: ${{ env.PRNUM }}
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"

          # Get PR commits
          gh api "repos/$REPO/pulls/$PRNUM/commits" --paginate > /tmp/commits.json
          FIRST_COMMIT_SHA=$(jq -r '.[0].sha' /tmp/commits.json)
          LAST_COMMIT_SHA=$(jq -r '.[-1].sha' /tmp/commits.json)

          echo "PR #$PRNUM commit range:"
          echo "  first commit: $FIRST_COMMIT_SHA"
          echo "  last commit : $LAST_COMMIT_SHA"
          echo

          # Fetch those SHAs locally
          git fetch origin "$FIRST_COMMIT_SHA" "$LAST_COMMIT_SHA"

          # Build the patch
          echo "Running: git diff --patch $FIRST_COMMIT_SHA...$LAST_COMMIT_SHA > /tmp/pr.patch"
          git diff --patch $FIRST_COMMIT_SHA...$LAST_COMMIT_SHA > /tmp/pr.patch

          echo "---- Patch preview (first 100 lines) ----"
          head -n 100 /tmp/pr.patch || true
          echo "---- End patch preview ----"

          # Apply patch to current backport branch
          git apply --3way --index --reject /tmp/pr.patch || true

          if git diff --cached --quiet; then
          echo "No staged changes from PR diff"; exit 0
          fi

          git commit -m "Backport PR #$PRNUM to release-1.0 (commits $FIRST_COMMIT_SHA..$LAST_COMMIT_SHA)"

      - name: Push backport branch
        run: git push --set-upstream origin "$BP"

      - name: Comment backport branch on source PR
        env:
          GH_TOKEN: ${{ github.token }}
          PRNUM: ${{ github.event.pull_request.number || inputs.pr_number }}
        run: |
          gh pr comment $PRNUM \
          --body "ðŸ“Œ A backport branch has been created: \`${BP}\`. Please open a PR from it into \`release-1.0\`."
