name: PR Merge Commit Range Reporter

on:
  pull_request:
    types: [closed]

permissions:
  contents: read
  pull-requests: read
  issues: write

jobs:
  report-commit-range:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Determine commit range and report
        id: report
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { owner, repo } = context.repo;

            // Fetch all commits in this PR (handles pagination)
            const commits = await github.paginate(
              github.rest.pulls.listCommits,
              { owner, repo, pull_number: pr.number, per_page: 100 }
            );

            if (!commits.length) {
              core.setFailed('No commits found in this PR.');
              return;
            }

            const startSha = commits[0].sha;
            const endSha = commits[commits.length - 1].sha;
            const headRef = pr.head.ref; // PR branch name
            const baseRef = pr.base.ref; // target branch name

            core.info(`Head branch: ${headRef}`);
            core.info(`Base branch: ${baseRef}`);
            core.info(`Start commit SHA: ${startSha}`);
            core.info(`End commit SHA: ${endSha}`);

            // Expose as outputs (in case other steps need them later)
            core.setOutput('start_sha', startSha);
            core.setOutput('end_sha', endSha);
            core.setOutput('head_ref', headRef);
            core.setOutput('base_ref', baseRef);

            // Job Summary for quick viewing in the Actions UI
            await core.summary
              .addHeading('PR Merge Commit Range')
              .addRaw(`PR #${pr.number} merged: ${pr.title}`, true)
              .addTable([
                [{ data: 'Head Branch', header: true }, headRef],
                [{ data: 'Base Branch', header: true }, baseRef],
                [{ data: 'Start SHA', header: true }, startSha],
                [{ data: 'End SHA', header: true }, endSha],
              ])
              .addLink('View PR', pr.html_url)
              .write();

            // Comment on the PR with the SHAs
            const body = [
              `This PR has been merged.`,
              `Head branch: ${headRef}`,
              `Base branch: ${baseRef}`,
              `Start commit SHA: ${startSha}`,
              `End commit SHA: ${endSha}`,
            ].join('\n');

            try {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr.number,
                body,
              });
            } catch (err) {
              core.warning(`Failed to comment on PR (likely due to permissions on forked PRs): ${err.message}`);
            }
